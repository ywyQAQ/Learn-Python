# 得到一个迭代器生成的切片对象，但是标准切片操作并不能做到。

# 函数itertools.islice()正好适用于迭代器和生成器上做切片操作。比如：

def count(n):
    while True:
        yield n
        n += 1

c = count(0)

import itertools
for x in itertools.islice(c, 10, 20):
    print(x)

# 函数islice()返回一个可以生成指定元素的迭代器，它通过遍历并丢弃直到切片开始索引位置的所有元素。
# 然后才开始一个个的返回元素，并直到切片结束索引位置。
# 这里要强调的一点是islice()会消耗掉传入的迭代器中的数据。必须考虑到迭代器是不可逆的这个事实。
# 如果之后要再次访问这个迭代器的话，那你需要将它里面的数据放入一个列表中。

